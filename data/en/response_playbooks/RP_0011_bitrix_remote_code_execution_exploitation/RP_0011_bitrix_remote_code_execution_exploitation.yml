title: Bitrix remote code execution exploitation
description: Response playbook for "Bitrix remote code execution exploitation" attack
id: RP0011
author: '@ERMACK_COMMUNITY'
creation_date: 2023/07/10
modification_date: 2023/07/11
linked_artifacts:
  - A3002
  - A4001
  - A1008
  - A1007
  - A2001
  - A2002
tags:
  - status.stable
  - severity.high
  - tlp.amber
  - pap.white
  - bitrix
preparation:
  - RP_1001_operational_preparations
identification:
  - RA_2008_prepare_iocs_list
  - RA_2321_scan_on_suspicious_files
  - RA_2010_ensure_successful_attack
  - RA_2009_scan_with_iocs_and_rules
  - RA_2302_list_files_modified
  - RA_2406_find_process_by_executable_content_pattern
containment:
  - RA_3001_patch_vulnerability
  - RA_3002_restrict_access_to_vulnerable_components
eradication:
  - RA_4301_remove_file
  - RP_1005_eradication_of_persisting_on_linux_host
  - RA_4401_kill_process
  - RA_4003_clear_backup_copy
  - RA_4004_update_sensitive_data
recovery:
  - RA_5002_restore_data_from_backup
  - RA_5003_check_service_on_correct_work
lessons_learned:
  - RA_6001_develop_incident_report
  - RA_6002_conduct_lessons_learned_exercise

extended_description: |
  Attackers can exploiting vulnerabilities in bitrix CMS for remote code execution on server. After that, they can carry out attacks within the network. When responding to this incident, it is important to check for known IOCs, as well as pay attention to suspicious files that are not in the standard distribution.
workflow: |
  <img src="../RP0011.png" alt="WORKFLOW"/>
  
  ### Finding IOCs
  
  | File name | Directory | Command for find |
  | --------- | --------- | ---------------- |
  | *xmlrpcs.php* | Various directories are used | *find ./ -name xmlrpcs.php* |
  | *inputs.php* | Various directories are used | *find ./ -name inputs.php* (note that /bitrix/modules/sale/lib/delivery/inputs.php is a legitimate file) |
  | *l.php* | /bitrix/src/app/ | find ./ -name l.php |
  | */bitrix/tools/spread.php* | /bitrix/tools/ <br> /bitrix/ | |
  | *access.php* <br> *wp.php* <br> *temp.php* <br> *locale.php* <br> *themes.php* <br> *network.php* <br> *container.php* <br> *router.php* <br> *wp-login.php* |  |  |
  | /bitrix/tools/send_trait_imap.php |  |  |
  | /bitrix/tools/.cas.php <br> /bitrix/tools/.cas.tmp.php |  |  |
  
  Pay attention to all files with a non-dictionary, randomly generated name from the character set [a-z, 0-9] in the /bitrix/admin/ directory and in the root directory of the site.
  Some identified files:
  
  1. */bitrix/admin/f408f2b7df70.php*
  2. */bitrix/admin/8f1c222aae51.php*
  3. */2469a41bac71.php*
  4. */98826/bfd99.php*
  
  ### Identification

  #### 1 Checking by means of «1С-Битрикс:Поиск троянов»
  Install "1С-Битрикс:Поиск троянов" from bitrix marketplace and start scanning. To do this, open the panel site management and go to the next tab: *"Настройки" -> bitrix.xscan -> "Поиск и поиск(бета)"*
  The module will scan the entire site and display the identified suspicious files.
  #### 2 Checking the access logs to the web server
  Check the fact of successful exploitation CVE-2022-27228. Search command example: <br>
  ``` grep -E 'POST /bitrix/tools/(html_editor_action.php)|(vote/uf.php)' /var/log/www.access.log* | grep '200' ``` <br>
  Similarly check requests for files from the finding IOCs section with code 200.
  Similarly, check for POST requests with a 200 response code containing the lines:
  - bitrixxx
  - BX_STAT
  - BX_TOKEN
  - ==
  
  For 'BX_STAT' search it is better to use regular expression: 'BX_STAT[^E]' because the 'BX_STATE' argument is used by default in legitimate files.
  #### 3 Search for new malicious files
  Check for atypical files (including those from the finding IOCs section)
  #### 4 Search for modified files
  In addition to creating new files, attackers can make changes to existing files in order to inject malicious code. To do this, check for the presence of fragments of the following lines in the source code of the application:
  - str_rot13
  - md5($_COOKIE
  - bitrixxx
  - eval(base64_decode
  - BX_STAT
  - BX_TOKEN
  - parse_str(hex2bin
  - iasfgjlzcb
  - QlhfVE9LRU4=
  - gzinflate(base64_decode
  - C.A.S
  - urldecode(base64_decode(hex2bin
     
  The following files must be excluded from the search results for the string "str_rot13":

  - /bitrix/modules/main/classes/general/vuln_scanner.php
  - /bitrix/modules/main/lib/search/content.php
  - /bitrix/modules/socialnetwork/lib/item/logindex.php

  because they use the "str_rot13()" function by default

  An example of a command to search for suspicious files: <br>
  ```grep -Er 'str_rot13|md5\(\$_COOKIE|bitrixxx|eval\(base64_decode|BX_STAT[^E]|BX_TOKEN|parse_str\(hex2bin|iasfgjlzcb|QlhfVE9LRU4=|gzinflate\(base64_decode|C\.A\.S|urldecode\(base64_decode\(hex2bin' /*```
  
  Known files where malicious code is embedded:
  
  - /bitrix/modules/main/include/prolog_after.php
  - /bitrix/admin/security_file_verifier.php
  - /bitrix/modules/main/bx_root.php
  
  It should be noted that it is worth looking not only for application files (.php), as attackers also use the technique of writing the “.htaccess” file to change the web server configuration.
  #### 5 Find persistence points
  - Check ways to persist access to the host. For example, the presence of illegitimate tasks in the cron task scheduler and other methods (for more details, see [Eradication of persisting on linux host response playbook](/response_playbooks/RP_1005_eradication_of_persisting_on_linux_host/entity)
  - On the page with the list of "1С-Битрикс" Agents (/bitrix/admin/agent_list.php), check the called functions for malicious code. To do this, open the site control panel and go to the following tab:
  *"Настройки" > "Настройки продукта" > "Агенты"*
  
  The name of the Agent can be anything, but most likely the malicious Agent will be visually visible. You can also see the presence of the eval() function, which agents should not contain:
  <img src="../agents.png" alt="Agents"/>
  
  
  ### Containment
  
  If it is not possible to update the CMS to the latest version, you can block POST requests to vulnerable files. Several options for how to do this:
  
  #### 1. Modifying web application files
  For each site, you need to modify the following files:
      - /bitrix/tools/upload.php
      - /bitrix/tools/mail_entry.php
      - /bitrix/modules/main/include/virtual_file_system.php
      - /bitrix/components/bitrix/sender.mail.editor/ajax.php
      - /bitrix/tools/vote/uf.php
      - /bitrix/tools/html_editor_action.php
      - /bitrix/admin/site_checker.php
  
  Before the "require_once" function, add the following code:
  ``` 
  if ($_SERVER['REQUEST_METHOD'] === 'POST') { 
    header("Status: 404 Not Found");
    die();
  }
  ```
  
  #### 2. Restricting access to vulnerable files using the web server
  Add deny rules to the web server configuration.
  Example rules for NGINX web server:
  
  ```
  location /bitrix/tools/vote/uf.php {
    if ($request_method = POST ) {
      deny all;
    }
  }
  
  location /bitrix/tools/html_editor_action.php {
    if ($request_method = POST ) {
      deny all;
    }
  }
  ```
  
  #### 3. Restricting access to vulnerable files using WAF/NGFW
  Disable direct POST requests to files:
      - /bitrix/tools/html_editor_action.php
      - /bitrix/tools/vote/uf.php
  
  ### Eradication
  
  1. Stop the web server service
  2. Check for another in-memory process executing PHP and stop that process
  Example command for this: *kill $(ps aux | grep 'php' | awk '{print $2}')*
  3. Clear cache of web applications
  4. Delete malicious files and clear embedded files identified at the identification stage
  5. Check the backup copy of the site (similar to the identification section) and, if malicious objects are finding, delete malicious objects or implementation of malicious code
  Additionally, it is recommended to use file control (https://dev.1c-bitrix.ru/user_help/settings/security/security_file_verifier.php)
  
  ### Recovery
  
  1. Restore site from backup
  2. Check the functionality of all sections of the site
  3. Update "1С-Битрикс: Управление сайтом" and PHP to the latest versions
  4. Change passwords of all CMS accounts
  5. Change the DB key "signer_default_key"
  Example command for change DB key:
  ```
  $oldKey = \Bitrix\Main\Config\Option::get('main', 'signer_default_key', false);
  \Bitrix\Main\Config\Option::set('main', 'signer_default_key', hash('sha512', uniqid(rand(), true)));
  echo "OldKey was: $oldKey\n";
  ```
  
  ## Response discovery mapping
  | ARTIFACT                  | RESPONSE ACTION                                                                                | RESPONSE ACTION OBSERVABLES                                                    |
  | ------------------------- | ---------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------ |
  | <[File]>(A_3002) | [Scan on suspicious files](#identification) <br> [Update sensitive information](#eradication) <br> *Find suspicious create or modification and known IOCs files using bitrix.xscan and standard utilities (ex. grep)* | Web shell loaded by attackers or modified file |
  | <[Process]>(A_4001) | [Find process by executable content pattern](#identification) <br> [Kill Process](#eradication) <br> *After stop <[web application server]>(A_2001) find remaining 'php' processes and kill them* | Process in which attackers code execute |
  | <[Log]>(A_1008) | [Ensure successful attack](#identification) <br> *Find the success of the exploit in the <[web server]>(A_2002) logs* | Log with successful exploit that contains <[ip address]>(A_1007) from which the attack was carried out |

